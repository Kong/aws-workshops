<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kong Konnect Enterprise Set Up on Self-Paced</title>
    <link>/040_kong_enterprise_setup.html</link>
    <description>Recent content in Kong Konnect Enterprise Set Up on Self-Paced</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="/040_kong_enterprise_setup/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Konnect Control Plane and Data Plane Setup</title>
      <link>/040_kong_enterprise_setup/041_data_plane_and_control_plane_setup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/040_kong_enterprise_setup/041_data_plane_and_control_plane_setup.html</guid>
      <description>Konnect Control Plane and Data Plane Create the Digital Certificate and Private Key pair In Hybrid mode, a mutual TLS handshake (mTLS) is used for authentication so the actual private key is never transferred on the network, and communication between CP and DP nodes is secure.
Before using Hybrid mode, you need a certificate/key pair. Kong Gateway provides two modes for handling certificate/key pairs:
 Shared mode: (Default) Use the Kong CLI to generate a certificate/key pair, then distribute copies across nodes.</description>
    </item>
    
    <item>
      <title>Konnect Data Plane Elasticity</title>
      <link>/040_kong_enterprise_setup/042_hpa.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/040_kong_enterprise_setup/042_hpa.html</guid>
      <description>Konnect Data Plane Elasticity One of the most important capabilities provided by Kubernetes is to easily scale out a Deployment. With a single command we can create or terminate pod replicas in order to optimaly support a given throughtput.
This capability is specially interesting for Kubernetes applications like Kong for Kubernetes Ingress Controller.
Here&amp;rsquo;s our deployment before scaling it out:
$ kubectl get service -n kong-dp NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE kong-dp-kong-proxy LoadBalancer 10.</description>
    </item>
    
    <item>
      <title>Prometheus and Grafana</title>
      <link>/040_kong_enterprise_setup/043_prometheus_grafana.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/040_kong_enterprise_setup/043_prometheus_grafana.html</guid>
      <description>Prometheus and Grafana From the Observability perspective, we&amp;rsquo;re going to use Prometheus and Grafana. Two levels of monitoring are possible:
 Kubernetes monitoring: Prometheus and Grafana monitor Kong Data Plane Deployment in terms of CPU, memory and networking consumption as well as HPA and the number of Pod replicas, just like any Kubernetes Deployment. Kong Data Plane monitoring: Prometheus and Grafana expose metrics the Kong Data Planes replicas provide in terms of API consumption including number of processed requests, etc.</description>
    </item>
    
    <item>
      <title>ELK Stack</title>
      <link>/040_kong_enterprise_setup/044_elk.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/040_kong_enterprise_setup/044_elk.html</guid>
      <description>ELK Stack From the Monitoring and Log Processing perspective, it&amp;rsquo;s important to integrate Kong Konnect Enterprise with a best-of-breed product to externalize all information related to processed requests and allow users to define dashboard, alerts, reports, etc.
This part of the tutorial shows how to configure the real-time integration between Kong Enterprise and Elastic products: Elasticsearch, Kibana and Logstash.
Elasticsearch Install Elasticsearch
 kubectl create namespace elk helm install elk elastic/elasticsearch -n elk --set replicas=1 --set minimumMasterNodes=1  Logstash Fetch the Charts and Update values.</description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>/040_kong_enterprise_setup/045_redis.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/040_kong_enterprise_setup/045_redis.html</guid>
      <description>Redis Redis can be consumed by Kong Data Plane for two use cases:
 Caching: data coming from the upstream services can be cached to provide even better response and latence times Rate Limiting: to allow the multiple instances of the Kong Data Plane to process the same rate limiting counters  We&amp;rsquo;re going to explore Kong Data Plane and Redis integration in the next sections of the workshop.</description>
    </item>
    
    <item>
      <title>Sample App Installation</title>
      <link>/040_kong_enterprise_setup/046_sample_application.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/040_kong_enterprise_setup/046_sample_application.html</guid>
      <description>Sample App Installation The going to deploy a very basic application to our EKS Cluster and protect it with Kong for Kubernetes Ingress Controller. The app simply returns the current datetime.
Deploy Sample App cat &amp;lt;&amp;lt;EOF | kubectl apply -f - apiVersion: v1 kind: Service metadata: name: sample namespace: default labels: app: sample spec: type: ClusterIP ports: - port: 5000 name: http selector: app: sample --- apiVersion: apps/v1 kind: Deployment metadata: name: sample namespace: default spec: replicas: 1 selector: matchLabels: app: sample template: metadata: labels: app: sample version: v1 spec: containers: - name: sample image: claudioacquaviva/sampleapp ports: - containerPort: 5000 EOF Check the Deployment</description>
    </item>
    
    <item>
      <title>Simple Kong Ingress</title>
      <link>/040_kong_enterprise_setup/047_simple_kong_ingress.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/040_kong_enterprise_setup/047_simple_kong_ingress.html</guid>
      <description>Kong Ingress Create an Ingress CRDs In order to expose &amp;ldquo;sample&amp;rdquo; through K4K8S, we&amp;rsquo;re going to create a specific &amp;ldquo;/sampleroute&amp;rdquo; route. Initially, the route is totally open and can be consumed freely. The next sections enable, as the name suggests, an API Key and a Rate Limiting mechanisms to protect the route.
cat &amp;lt;&amp;lt;EOF | kubectl apply -f - apiVersion: extensions/v1beta1 kind: Ingress metadata: name: sampleroute namespace: default annotations: konghq.</description>
    </item>
    
  </channel>
</rss>
